//
// Generated file, do not edit! Created by opp_msgtool 6.0 from CoordinatorMsg.msg.
//

#ifndef __COORDINATORMSG_M_H
#define __COORDINATORMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class CoordinatorMsg;
/**
 * Class generated from <tt>CoordinatorMsg.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet CoordinatorMsg
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     string Mtype = "coordinator";
 *     int startTime;
 *     int startingNode;
 * }
 * </pre>
 *
 * CoordinatorMsg_Base is only useful if it gets subclassed, and CoordinatorMsg is derived from it.
 * The minimum code to be written for CoordinatorMsg is the following:
 *
 * <pre>
 * class CoordinatorMsg : public CoordinatorMsg_Base
 * {
 *   private:
 *     void copy(const CoordinatorMsg& other) { ... }

 *   public:
 *     CoordinatorMsg(const char *name=nullptr, short kind=0) : CoordinatorMsg_Base(name,kind) {}
 *     CoordinatorMsg(const CoordinatorMsg& other) : CoordinatorMsg_Base(other) {copy(other);}
 *     CoordinatorMsg& operator=(const CoordinatorMsg& other) {if (this==&other) return *this; CoordinatorMsg_Base::operator=(other); copy(other); return *this;}
 *     virtual CoordinatorMsg *dup() const override {return new CoordinatorMsg(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from CoordinatorMsg_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(CoordinatorMsg)
 * </pre>
 */
class CoordinatorMsg_Base : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string Mtype = "coordinator";
    int startTime = 0;
    int startingNode = 0;

  private:
    void copy(const CoordinatorMsg_Base& other);

  protected:
    bool operator==(const CoordinatorMsg_Base&) = delete;
    CoordinatorMsg_Base(const CoordinatorMsg_Base& other);
    // make assignment operator protected to force the user override it
    CoordinatorMsg_Base& operator=(const CoordinatorMsg_Base& other);

  public:
    // make constructors protected to avoid instantiation
    CoordinatorMsg_Base(const char *name=nullptr, short kind=0);
    virtual ~CoordinatorMsg_Base();
    virtual CoordinatorMsg_Base *dup() const override {return new CoordinatorMsg_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getMtype() const;
    virtual void setMtype(const char * Mtype);

    virtual int getStartTime() const;
    virtual void setStartTime(int startTime);

    virtual int getStartingNode() const;
    virtual void setStartingNode(int startingNode);
};


namespace omnetpp {

template<> inline CoordinatorMsg_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<CoordinatorMsg_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __COORDINATORMSG_M_H

